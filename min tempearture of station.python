{"version":"NotebookV1","origId":958031200797637,"name":"min tempearture of station","language":"python","commands":[{"version":"CommandV1","origId":958031200797638,"guid":"829f8c8b-49a3-45be-a076-a19ca9c867da","subtype":"command","commandType":"auto","position":1.0,"command":"# data as in colname\n#StationName   date(yy/mm/dd)    tempType    tempValue\n\n# making an rdd\nline = sc.textFile(\"/FileStore/tables/1800.csv\")\n\n# collecting only the min value\nminTemp = line.filter(lambda x : 'TMIN' in x)\n\n#minTemp.collect()\n\nrdd = minTemp.map(func)\nrdd.collect()\n#rdd.collect()\n\nstationtemp = rdd.map(lambda x: (x[0], x[2]))\nstationtemp.collect()","commandVersion":147,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"><span class=\"ansired\">Out[</span><span class=\"ansired\">24</span><span class=\"ansired\">]: </span>\n[(&apos;ITE00100554&apos;, 5.359999999999999),\n (&apos;EZE00100082&apos;, 7.699999999999999),\n (&apos;ITE00100554&apos;, 9.5),\n (&apos;EZE00100082&apos;, 8.599999999999998),\n (&apos;ITE00100554&apos;, 23.72),\n (&apos;EZE00100082&apos;, 18.86),\n (&apos;ITE00100554&apos;, 29.66),\n (&apos;EZE00100082&apos;, 18.68),\n (&apos;ITE00100554&apos;, 30.919999999999998),\n (&apos;EZE00100082&apos;, 21.56),\n (&apos;ITE00100554&apos;, 34.34),\n (&apos;EZE00100082&apos;, 21.740000000000002),\n (&apos;ITE00100554&apos;, 33.8),\n (&apos;EZE00100082&apos;, 23.0),\n (&apos;ITE00100554&apos;, 34.52),\n (&apos;EZE00100082&apos;, 26.42),\n (&apos;ITE00100554&apos;, 36.14),\n (&apos;EZE00100082&apos;, 23.72),\n (&apos;ITE00100554&apos;, 37.58),\n (&apos;EZE00100082&apos;, 18.5),\n (&apos;ITE00100554&apos;, 39.38),\n (&apos;EZE00100082&apos;, 20.84),\n (&apos;ITE00100554&apos;, 37.22),\n (&apos;EZE00100082&apos;, 21.2),\n (&apos;ITE00100554&apos;, 34.34),\n (&apos;EZE00100082&apos;, 21.2),\n (&apos;ITE00100554&apos;, 36.14),\n (&apos;EZE00100082&apos;, 25.7),\n (&apos;ITE00100554&apos;, 39.38),\n (&apos;EZE00100082&apos;, 27.86),\n (&apos;ITE00100554&apos;, 39.38),\n (&apos;EZE00100082&apos;, 25.34),\n (&apos;ITE00100554&apos;, 40.64),\n (&apos;EZE00100082&apos;, 25.7),\n (&apos;ITE00100554&apos;, 40.28),\n (&apos;EZE00100082&apos;, 33.62),\n (&apos;ITE00100554&apos;, 41.0),\n (&apos;EZE00100082&apos;, 38.120000000000005),\n (&apos;ITE00100554&apos;, 36.5),\n (&apos;EZE00100082&apos;, 35.06),\n (&apos;ITE00100554&apos;, 37.4),\n (&apos;EZE00100082&apos;, 33.44),\n (&apos;ITE00100554&apos;, 45.32),\n (&apos;EZE00100082&apos;, 29.12),\n (&apos;ITE00100554&apos;, 45.5),\n (&apos;EZE00100082&apos;, 29.12),\n (&apos;ITE00100554&apos;, 45.5),\n (&apos;EZE00100082&apos;, 31.46),\n (&apos;ITE00100554&apos;, 45.5),\n (&apos;EZE00100082&apos;, 32.36),\n (&apos;ITE00100554&apos;, 38.120000000000005),\n (&apos;EZE00100082&apos;, 34.88),\n (&apos;ITE00100554&apos;, 37.22),\n (&apos;EZE00100082&apos;, 34.7),\n (&apos;ITE00100554&apos;, 41.72),\n (&apos;EZE00100082&apos;, 37.94),\n (&apos;ITE00100554&apos;, 41.0),\n (&apos;EZE00100082&apos;, 35.42),\n (&apos;ITE00100554&apos;, 41.0),\n (&apos;EZE00100082&apos;, 32.54),\n (&apos;ITE00100554&apos;, 41.0),\n (&apos;EZE00100082&apos;, 36.14),\n (&apos;ITE00100554&apos;, 43.34),\n (&apos;EZE00100082&apos;, 35.06),\n (&apos;ITE00100554&apos;, 41.72),\n (&apos;EZE00100082&apos;, 35.42),\n (&apos;ITE00100554&apos;, 41.72),\n (&apos;EZE00100082&apos;, 32.36),\n (&apos;ITE00100554&apos;, 42.620000000000005),\n (&apos;EZE00100082&apos;, 39.02),\n (&apos;ITE00100554&apos;, 40.28),\n (&apos;EZE00100082&apos;, 35.96),\n (&apos;ITE00100554&apos;, 39.38),\n (&apos;EZE00100082&apos;, 31.46),\n (&apos;ITE00100554&apos;, 38.3),\n (&apos;EZE00100082&apos;, 28.04),\n (&apos;ITE00100554&apos;, 36.5),\n (&apos;EZE00100082&apos;, 24.98),\n (&apos;ITE00100554&apos;, 32.0),\n (&apos;EZE00100082&apos;, 25.52),\n (&apos;ITE00100554&apos;, 34.88),\n (&apos;EZE00100082&apos;, 19.58),\n (&apos;ITE00100554&apos;, 33.62),\n (&apos;EZE00100082&apos;, 13.639999999999997),\n (&apos;ITE00100554&apos;, 32.54),\n (&apos;EZE00100082&apos;, 17.96),\n (&apos;ITE00100554&apos;, 32.0),\n (&apos;EZE00100082&apos;, 24.439999999999998),\n (&apos;ITE00100554&apos;, 32.0),\n (&apos;EZE00100082&apos;, 25.7),\n (&apos;ITE00100554&apos;, 34.34),\n (&apos;EZE00100082&apos;, 32.0),\n (&apos;ITE00100554&apos;, 34.34),\n (&apos;EZE00100082&apos;, 30.919999999999998),\n (&apos;ITE00100554&apos;, 36.14),\n (&apos;EZE00100082&apos;, 29.66),\n (&apos;ITE00100554&apos;, 35.78),\n (&apos;EZE00100082&apos;, 22.64),\n (&apos;ITE00100554&apos;, 38.84),\n (&apos;EZE00100082&apos;, 23.0),\n (&apos;ITE00100554&apos;, 38.84),\n (&apos;EZE00100082&apos;, 19.04),\n (&apos;ITE00100554&apos;, 36.5),\n (&apos;EZE00100082&apos;, 21.2),\n (&apos;ITE00100554&apos;, 40.64),\n (&apos;EZE00100082&apos;, 24.439999999999998),\n (&apos;ITE00100554&apos;, 41.72),\n (&apos;EZE00100082&apos;, 35.06),\n (&apos;ITE00100554&apos;, 45.14),\n (&apos;EZE00100082&apos;, 34.52),\n (&apos;ITE00100554&apos;, 42.8),\n (&apos;EZE00100082&apos;, 32.72),\n (&apos;ITE00100554&apos;, 47.84),\n (&apos;EZE00100082&apos;, 21.740000000000002),\n (&apos;ITE00100554&apos;, 47.84),\n (&apos;EZE00100082&apos;, 18.68),\n (&apos;ITE00100554&apos;, 43.34),\n (&apos;EZE00100082&apos;, 24.259999999999998),\n (&apos;ITE00100554&apos;, 43.88),\n (&apos;EZE00100082&apos;, 25.34),\n (&apos;ITE00100554&apos;, 42.8),\n (&apos;EZE00100082&apos;, 24.8),\n (&apos;ITE00100554&apos;, 40.28),\n (&apos;EZE00100082&apos;, 26.6),\n (&apos;ITE00100554&apos;, 37.22),\n (&apos;EZE00100082&apos;, 27.86),\n (&apos;ITE00100554&apos;, 35.78),\n (&apos;EZE00100082&apos;, 23.54),\n (&apos;ITE00100554&apos;, 37.22),\n (&apos;EZE00100082&apos;, 19.4),\n (&apos;ITE00100554&apos;, 34.88),\n (&apos;EZE00100082&apos;, 15.98),\n (&apos;ITE00100554&apos;, 32.0),\n (&apos;EZE00100082&apos;, 8.599999999999998),\n (&apos;ITE00100554&apos;, 34.88),\n (&apos;EZE00100082&apos;, 15.259999999999998),\n (&apos;ITE00100554&apos;, 36.5),\n (&apos;EZE00100082&apos;, 12.2),\n (&apos;ITE00100554&apos;, 37.22),\n (&apos;EZE00100082&apos;, 12.739999999999998),\n (&apos;ITE00100554&apos;, 39.38),\n (&apos;EZE00100082&apos;, 16.339999999999996),\n (&apos;ITE00100554&apos;, 39.92),\n (&apos;EZE00100082&apos;, 12.2),\n (&apos;ITE00100554&apos;, 36.5),\n (&apos;EZE00100082&apos;, 21.02),\n (&apos;ITE00100554&apos;, 41.0),\n (&apos;EZE00100082&apos;, 22.64),\n (&apos;ITE00100554&apos;, 38.3),\n (&apos;EZE00100082&apos;, 19.939999999999998),\n (&apos;ITE00100554&apos;, 41.72),\n (&apos;EZE00100082&apos;, 22.64),\n (&apos;ITE00100554&apos;, 42.08),\n (&apos;EZE00100082&apos;, 25.7),\n (&apos;ITE00100554&apos;, 42.8),\n (&apos;EZE00100082&apos;, 28.58),\n (&apos;ITE00100554&apos;, 45.14),\n (&apos;EZE00100082&apos;, 25.16),\n (&apos;ITE00100554&apos;, 41.0),\n (&apos;EZE00100082&apos;, 23.36),\n (&apos;ITE00100554&apos;, 40.64),\n (&apos;EZE00100082&apos;, 21.740000000000002),\n (&apos;ITE00100554&apos;, 35.42),\n (&apos;EZE00100082&apos;, 17.96),\n (&apos;ITE00100554&apos;, 33.8),\n (&apos;EZE00100082&apos;, 27.68),\n (&apos;ITE00100554&apos;, 36.5),\n (&apos;EZE00100082&apos;, 33.44),\n (&apos;ITE00100554&apos;, 37.58),\n (&apos;EZE00100082&apos;, 33.62),\n (&apos;ITE00100554&apos;, 40.64),\n (&apos;EZE00100082&apos;, 31.1),\n (&apos;ITE00100554&apos;, 41.72),\n (&apos;EZE00100082&apos;, 27.86),\n (&apos;ITE00100554&apos;, 47.3),\n (&apos;EZE00100082&apos;, 32.72),\n (&apos;ITE00100554&apos;, 47.3),\n (&apos;EZE00100082&apos;, 33.8),\n (&apos;ITE00100554&apos;, 45.5),\n (&apos;EZE00100082&apos;, 33.98),\n (&apos;ITE00100554&apos;, 50.0),\n (&apos;EZE00100082&apos;, 41.0),\n (&apos;ITE00100554&apos;, 49.64),\n (&apos;EZE00100082&apos;, 42.620000000000005),\n (&apos;ITE00100554&apos;, 45.5),\n (&apos;EZE00100082&apos;, 42.980000000000004),\n (&apos;ITE00100554&apos;, 45.5),\n (&apos;EZE00100082&apos;, 44.42),\n (&apos;ITE00100554&apos;, 47.120000000000005),\n (&apos;EZE00100082&apos;, 43.7),\n (&apos;ITE00100554&apos;, 49.28),\n (&apos;EZE00100082&apos;, 49.1),\n (&apos;ITE00100554&apos;, 49.82),\n (&apos;EZE00100082&apos;, 45.32),\n (&apos;ITE00100554&apos;, 51.620000000000005),\n (&apos;EZE00100082&apos;, 45.5),\n (&apos;ITE00100554&apos;, 58.64),\n (&apos;EZE00100082&apos;, 50.900000000000006),\n (&apos;ITE00100554&apos;, 55.22),\n (&apos;EZE00100082&apos;, 54.5),\n (&apos;ITE00100554&apos;, 57.38),\n (&apos;EZE00100082&apos;, 49.1),\n (&apos;ITE00100554&apos;, 52.88),\n (&apos;EZE00100082&apos;, 41.9),\n (&apos;ITE00100554&apos;, 55.22),\n (&apos;EZE00100082&apos;, 49.82),\n (&apos;ITE00100554&apos;, 48.379999999999995),\n (&apos;EZE00100082&apos;, 47.660000000000004),\n (&apos;ITE00100554&apos;, 52.88),\n (&apos;EZE00100082&apos;, 51.620000000000005),\n (&apos;ITE00100554&apos;, 55.22),\n (&apos;EZE00100082&apos;, 50.36),\n (&apos;ITE00100554&apos;, 55.22),\n (&apos;EZE00100082&apos;, 51.8),\n (&apos;ITE00100554&apos;, 56.120000000000005),\n (&apos;EZE00100082&apos;, 55.400000000000006),\n (&apos;ITE00100554&apos;, 56.84),\n (&apos;EZE00100082&apos;, 58.28),\n (&apos;ITE00100554&apos;, 59.0),\n (&apos;EZE00100082&apos;, 54.5),\n (&apos;ITE00100554&apos;, 59.72),\n (&apos;EZE00100082&apos;, 59.540000000000006),\n (&apos;ITE00100554&apos;, 61.88),\n (&apos;EZE00100082&apos;, 60.260000000000005),\n (&apos;ITE00100554&apos;, 61.88),\n (&apos;EZE00100082&apos;, 65.30000000000001),\n (&apos;ITE00100554&apos;, 58.28),\n (&apos;EZE00100082&apos;, 63.86),\n (&apos;ITE00100554&apos;, 59.0),\n (&apos;EZE00100082&apos;, 61.88),\n (&apos;ITE00100554&apos;, 59.72),\n (&apos;EZE00100082&apos;, 60.44),\n (&apos;ITE00100554&apos;, 59.72),\n (&apos;EZE00100082&apos;, 60.8),\n (&apos;ITE00100554&apos;, 60.620000000000005),\n (&apos;EZE00100082&apos;, 64.4),\n (&apos;ITE00100554&apos;, 62.42),\n (&apos;EZE00100082&apos;, 61.88),\n (&apos;ITE00100554&apos;, 60.620000000000005),\n (&apos;EZE00100082&apos;, 58.46),\n (&apos;ITE00100554&apos;, 60.8),\n (&apos;EZE00100082&apos;, 54.86),\n (&apos;ITE00100554&apos;, 60.8),\n (&apos;EZE00100082&apos;, 57.019999999999996),\n (&apos;ITE00100554&apos;, 59.72),\n (&apos;EZE00100082&apos;, 61.52),\n (&apos;ITE00100554&apos;, 60.08),\n (&apos;EZE00100082&apos;, 59.36),\n (&apos;ITE00100554&apos;, 60.8),\n (&apos;EZE00100082&apos;, 60.8),\n (&apos;ITE00100554&apos;, 57.2),\n (&apos;EZE00100082&apos;, 56.480000000000004),\n (&apos;ITE00100554&apos;, 49.28),\n (&apos;EZE00100082&apos;, 52.88),\n (&apos;ITE00100554&apos;, 53.78),\n (&apos;EZE00100082&apos;, 55.400000000000006),\n (&apos;ITE00100554&apos;, 56.120000000000005),\n (&apos;EZE00100082&apos;, 59.18000000000001),\n (&apos;ITE00100554&apos;, 59.72),\n (&apos;EZE00100082&apos;, 58.82),\n (&apos;ITE00100554&apos;, 59.72),\n (&apos;EZE00100082&apos;, 50.540000000000006),\n (&apos;ITE00100554&apos;, 59.0),\n (&apos;EZE00100082&apos;, 50.0),\n (&apos;ITE00100554&apos;, 59.72),\n (&apos;EZE00100082&apos;, 53.96),\n (&apos;ITE00100554&apos;, 56.120000000000005),\n (&apos;EZE00100082&apos;, 54.5),\n (&apos;ITE00100554&apos;, 56.3),\n (&apos;EZE00100082&apos;, 52.88),\n (&apos;ITE00100554&apos;, 56.3),\n (&apos;EZE00100082&apos;, 55.22),\n (&apos;ITE00100554&apos;, 60.8),\n (&apos;EZE00100082&apos;, 54.32),\n (&apos;ITE00100554&apos;, 58.28),\n (&apos;EZE00100082&apos;, 53.42),\n (&apos;ITE00100554&apos;, 56.3),\n (&apos;EZE00100082&apos;, 50.900000000000006),\n (&apos;ITE00100554&apos;, 56.84),\n (&apos;EZE00100082&apos;, 52.7),\n (&apos;ITE00100554&apos;, 64.22),\n (&apos;EZE00100082&apos;, 56.480000000000004),\n (&apos;ITE00100554&apos;, 61.88),\n (&apos;EZE00100082&apos;, 60.260000000000005),\n (&apos;ITE00100554&apos;, 65.84),\n (&apos;EZE00100082&apos;, 64.94),\n (&apos;ITE00100554&apos;, 65.30000000000001),\n (&apos;EZE00100082&apos;, 64.03999999999999),\n (&apos;ITE00100554&apos;, 64.58000000000001),\n (&apos;EZE00100082&apos;, 63.32000000000001),\n (&apos;ITE00100554&apos;, 67.64),\n (&apos;EZE00100082&apos;, 60.8),\n (&apos;ITE00100554&apos;, 69.80000000000001),\n (&apos;EZE00100082&apos;, 63.14),\n (&apos;ITE00100554&apos;, 66.38),\n (&apos;EZE00100082&apos;, 66.02000000000001),\n (&apos;ITE00100554&apos;, 66.38),\n (&apos;EZE00100082&apos;, 66.92),\n (&apos;ITE00100554&apos;, 67.28),\n (&apos;EZE00100082&apos;, 64.94),\n (&apos;ITE00100554&apos;, 67.28),\n (&apos;EZE00100082&apos;, 62.6),\n (&apos;ITE00100554&apos;, 66.38),\n (&apos;EZE00100082&apos;, 60.260000000000005),\n (&apos;ITE00100554&apos;, 56.84),\n (&apos;EZE00100082&apos;, 55.760000000000005),\n (&apos;ITE00100554&apos;, 56.84),\n (&apos;EZE00100082&apos;, 57.92),\n (&apos;ITE00100554&apos;, 60.08),\n (&apos;EZE00100082&apos;, 57.38),\n (&apos;ITE00100554&apos;, 63.14),\n (&apos;EZE00100082&apos;, 58.46),\n (&apos;ITE00100554&apos;, 65.12),\n (&apos;EZE00100082&apos;, 63.86),\n (&apos;ITE00100554&apos;, 63.14),\n (&apos;EZE00100082&apos;, 55.94),\n (&apos;ITE00100554&apos;, 62.42),\n (&apos;EZE00100082&apos;, 53.06),\n (&apos;ITE00100554&apos;, 61.88),\n (&apos;EZE00100082&apos;, 53.42),\n (&apos;ITE00100554&apos;, 61.88),\n (&apos;EZE00100082&apos;, 55.22),\n (&apos;ITE00100554&apos;, 62.42),\n (&apos;EZE00100082&apos;, 50.72),\n (&apos;ITE00100554&apos;, 63.5),\n (&apos;EZE00100082&apos;, 50.0),\n (&apos;ITE00100554&apos;, 62.78),\n (&apos;EZE00100082&apos;, 52.7),\n (&apos;ITE00100554&apos;, 61.88),\n (&apos;EZE00100082&apos;, 54.68000000000001),\n (&apos;ITE00100554&apos;, 57.38),\n (&apos;EZE00100082&apos;, 48.2),\n (&apos;ITE00100554&apos;, 57.38),\n (&apos;EZE00100082&apos;, 47.120000000000005),\n (&apos;ITE00100554&apos;, 57.38),\n (&apos;EZE00100082&apos;, 46.760000000000005),\n (&apos;ITE00100554&apos;, 58.28),\n (&apos;EZE00100082&apos;, 47.660000000000004),\n (&apos;ITE00100554&apos;, 58.64),\n (&apos;EZE00100082&apos;, 49.64),\n (&apos;ITE00100554&apos;, 58.28),\n (&apos;EZE00100082&apos;, 47.84),\n (&apos;ITE00100554&apos;, 63.14),\n (&apos;EZE00100082&apos;, 60.08),\n (&apos;ITE00100554&apos;, 68.72),\n (&apos;EZE00100082&apos;, 56.120000000000005),\n (&apos;ITE00100554&apos;, 59.72),\n (&apos;EZE00100082&apos;, 53.24),\n (&apos;ITE00100554&apos;, 64.22),\n (&apos;EZE00100082&apos;, 52.7),\n (&apos;ITE00100554&apos;, 65.12),\n (&apos;EZE00100082&apos;, 50.0),\n (&apos;ITE00100554&apos;, 65.12),\n (&apos;EZE00100082&apos;, 55.58),\n (&apos;ITE00100554&apos;, 68.72),\n (&apos;EZE00100082&apos;, 60.980000000000004),\n (&apos;ITE00100554&apos;, 70.34),\n (&apos;EZE00100082&apos;, 57.2),\n (&apos;ITE00100554&apos;, 67.64),\n (&apos;EZE00100082&apos;, 56.660000000000004),\n (&apos;ITE00100554&apos;, 69.62),\n (&apos;EZE00100082&apos;, 59.900000000000006),\n (&apos;ITE00100554&apos;, 70.34),\n (&apos;EZE00100082&apos;, 55.040000000000006),\n (&apos;ITE00100554&apos;, 65.30000000000001),\n (&apos;EZE00100082&apos;, 56.3),\n (&apos;ITE00100554&apos;, 68.0),\n (&apos;EZE00100082&apos;, 56.120000000000005),\n (&apos;ITE00100554&apos;, 68.0),\n (&apos;EZE00100082&apos;, 57.92),\n (&apos;ITE00100554&apos;, 71.42),\n (&apos;EZE00100082&apos;, 58.46),\n (&apos;ITE00100554&apos;, 70.34),\n (&apos;EZE00100082&apos;, 65.84),\n (&apos;ITE00100554&apos;, 71.78),\n (&apos;EZE00100082&apos;, 64.4),\n (&apos;ITE00100554&apos;, 69.62),\n (&apos;EZE00100082&apos;, 64.4),\n (&apos;ITE00100554&apos;, 72.5),\n (&apos;EZE00100082&apos;, 68.72),\n (&apos;ITE00100554&apos;, 74.30000000000001),\n (&apos;EZE00100082&apos;, 67.1),\n (&apos;ITE00100554&apos;, 74.84),\n (&apos;EZE00100082&apos;, 60.620000000000005),\n (&apos;ITE00100554&apos;, 75.38),\n (&apos;EZE00100082&apos;, 60.8),\n (&apos;ITE00100554&apos;, 73.58000000000001),\n (&apos;EZE00100082&apos;, 62.96),\n (&apos;ITE00100554&apos;, 72.5),\n (&apos;EZE00100082&apos;, 57.92),\n (&apos;ITE00100554&apos;, 72.5),\n (&apos;EZE00100082&apos;, 54.32),\n (&apos;ITE00100554&apos;, 68.72),\n (&apos;EZE00100082&apos;, 55.94),\n (&apos;ITE00100554&apos;, 69.62),\n (&apos;EZE00100082&apos;, 57.2),\n (&apos;ITE00100554&apos;, 70.34),\n (&apos;EZE00100082&apos;, 57.56),\n (&apos;ITE00100554&apos;, 72.5),\n (&apos;EZE00100082&apos;, 56.480000000000004),\n (&apos;ITE00100554&apos;, 66.38),\n (&apos;EZE00100082&apos;, 55.760000000000005),\n (&apos;ITE00100554&apos;, 66.38),\n (&apos;EZE00100082&apos;, 54.32),\n (&apos;ITE00100554&apos;, 70.34),\n (&apos;EZE00100082&apos;, 55.400000000000006),\n (&apos;ITE00100554&apos;, 61.34),\n (&apos;EZE00100082&apos;, 57.74),\n (&apos;ITE00100554&apos;, 62.78),\n (&apos;EZE00100082&apos;, 59.900000000000006),\n (&apos;ITE00100554&apos;, 66.38),\n (&apos;EZE00100082&apos;, 59.36),\n (&apos;ITE00100554&apos;, 66.38),\n (&apos;EZE00100082&apos;, 57.92),\n (&apos;ITE00100554&apos;, 69.08000000000001),\n (&apos;EZE00100082&apos;, 62.42),\n (&apos;ITE00100554&apos;, 70.88),\n (&apos;EZE00100082&apos;, 57.92),\n (&apos;ITE00100554&apos;, 68.0),\n (&apos;EZE00100082&apos;, 59.0),\n (&apos;ITE00100554&apos;, 68.0),\n (&apos;EZE00100082&apos;, 53.6),\n (&apos;ITE00100554&apos;, 65.84),\n (&apos;EZE00100082&apos;, 56.660000000000004),\n (&apos;ITE00100554&apos;, 68.0),\n (&apos;EZE00100082&apos;, 57.2),\n (&apos;ITE00100554&apos;, 65.84),\n (&apos;EZE00100082&apos;, 59.72),\n (&apos;ITE00100554&apos;, 68.0),\n (&apos;EZE00100082&apos;, 64.94),\n (&apos;ITE00100554&apos;, 68.0),\n (&apos;EZE00100082&apos;, 66.56),\n (&apos;ITE00100554&apos;, 69.80000000000001),\n (&apos;EZE00100082&apos;, 62.24),\n (&apos;ITE00100554&apos;, 70.34),\n (&apos;EZE00100082&apos;, 56.84),\n (&apos;ITE00100554&apos;, 68.0),\n (&apos;EZE00100082&apos;, 57.38),\n (&apos;ITE00100554&apos;, 57.74),\n (&apos;EZE00100082&apos;, 56.480000000000004),\n (&apos;ITE00100554&apos;, 57.92),\n (&apos;EZE00100082&apos;, 53.06),\n (&apos;ITE00100554&apos;, 60.620000000000005),\n (&apos;EZE00100082&apos;, 59.900000000000006),\n (&apos;ITE00100554&apos;, 61.88),\n (&apos;EZE00100082&apos;, 59.900000000000006),\n (&apos;ITE00100554&apos;, 65.12),\n (&apos;EZE00100082&apos;, 61.16),\n (&apos;ITE00100554&apos;, 68.72),\n (&apos;EZE00100082&apos;, 61.7),\n (&apos;ITE00100554&apos;, 71.78),\n (&apos;EZE00100082&apos;, 64.4),\n (&apos;ITE00100554&apos;, 70.88),\n (&apos;EZE00100082&apos;, 64.58000000000001),\n (&apos;ITE00100554&apos;, 70.88),\n (&apos;EZE00100082&apos;, 67.64),\n (&apos;ITE00100554&apos;, 70.88),\n (&apos;EZE00100082&apos;, 64.03999999999999),\n (&apos;ITE00100554&apos;, 71.78),\n (&apos;EZE00100082&apos;, 65.30000000000001),\n (&apos;ITE00100554&apos;, 74.84),\n (&apos;EZE00100082&apos;, 67.1),\n (&apos;ITE00100554&apos;, 74.30000000000001),\n (&apos;EZE00100082&apos;, 68.36000000000001),\n (&apos;ITE00100554&apos;, 73.58000000000001),\n (&apos;EZE00100082&apos;, 67.1),\n (&apos;ITE00100554&apos;, 69.62),\n (&apos;EZE00100082&apos;, 60.44),\n (&apos;ITE00100554&apos;, 68.72),\n (&apos;EZE00100082&apos;, 53.42),\n (&apos;ITE00100554&apos;, 58.64),\n (&apos;EZE00100082&apos;, 59.72),\n (&apos;ITE00100554&apos;, 62.78),\n (&apos;EZE00100082&apos;, 55.94),\n (&apos;ITE00100554&apos;, 60.620000000000005),\n (&apos;EZE00100082&apos;, 59.18000000000001),\n (&apos;ITE00100554&apos;, 58.28),\n (&apos;EZE00100082&apos;, 58.64),\n (&apos;ITE00100554&apos;, 59.72),\n (&apos;EZE00100082&apos;, 60.44),\n (&apos;ITE00100554&apos;, 64.22),\n (&apos;EZE00100082&apos;, 58.82),\n (&apos;ITE00100554&apos;, 61.34),\n (&apos;EZE00100082&apos;, 59.72),\n (&apos;ITE00100554&apos;, 61.7),\n (&apos;EZE00100082&apos;, 58.46),\n (&apos;ITE00100554&apos;, 65.12),\n (&apos;EZE00100082&apos;, 58.64),\n (&apos;ITE00100554&apos;, 64.22),\n (&apos;EZE00100082&apos;, 59.36),\n (&apos;ITE00100554&apos;, 61.88),\n (&apos;EZE00100082&apos;, 60.260000000000005),\n (&apos;ITE00100554&apos;, 61.88),\n (&apos;EZE00100082&apos;, 57.38),\n (&apos;ITE00100554&apos;, 66.38),\n (&apos;EZE00100082&apos;, 59.72),\n (&apos;ITE00100554&apos;, 64.22),\n (&apos;EZE00100082&apos;, 63.14),\n (&apos;ITE00100554&apos;, 64.03999999999999),\n (&apos;EZE00100082&apos;, 58.28),\n (&apos;ITE00100554&apos;, 63.5),\n (&apos;EZE00100082&apos;, 65.12),\n (&apos;ITE00100554&apos;, 65.84),\n (&apos;EZE00100082&apos;, 61.34),\n (&apos;ITE00100554&apos;, 65.84),\n (&apos;EZE00100082&apos;, 59.36),\n (&apos;ITE00100554&apos;, 61.34),\n (&apos;EZE00100082&apos;, 60.260000000000005),\n (&apos;ITE00100554&apos;, 61.34),\n (&apos;EZE00100082&apos;, 57.38),\n (&apos;ITE00100554&apos;, 59.72),\n (&apos;EZE00100082&apos;, 52.88),\n (&apos;ITE00100554&apos;, 61.88),\n (&apos;EZE00100082&apos;, 50.72),\n (&apos;ITE00100554&apos;, 60.620000000000005),\n (&apos;EZE00100082&apos;, 52.7),\n (&apos;ITE00100554&apos;, 59.72),\n (&apos;EZE00100082&apos;, 51.980000000000004),\n (&apos;ITE00100554&apos;, 61.34),\n (&apos;EZE00100082&apos;, 51.8),\n (&apos;ITE00100554&apos;, 63.5),\n (&apos;EZE00100082&apos;, 53.24),\n (&apos;ITE00100554&apos;, 65.12),\n (&apos;EZE00100082&apos;, 61.7),\n (&apos;ITE00100554&apos;, 66.38),\n (&apos;EZE00100082&apos;, 57.56),\n (&apos;ITE00100554&apos;, 66.38),\n (&apos;EZE00100082&apos;, 59.900000000000006),\n (&apos;ITE00100554&apos;, 65.30000000000001),\n (&apos;EZE00100082&apos;, 56.480000000000004),\n (&apos;ITE00100554&apos;, 61.34),\n (&apos;EZE00100082&apos;, 55.58),\n (&apos;ITE00100554&apos;, 62.42),\n (&apos;EZE00100082&apos;, 55.760000000000005),\n (&apos;ITE00100554&apos;, 62.78),\n (&apos;EZE00100082&apos;, 54.5),\n (&apos;ITE00100554&apos;, 64.58000000000001),\n (&apos;EZE00100082&apos;, 52.7),\n (&apos;ITE00100554&apos;, 55.22),\n (&apos;EZE00100082&apos;, 52.88),\n (&apos;ITE00100554&apos;, 64.58000000000001),\n (&apos;EZE00100082&apos;, 52.519999999999996),\n (&apos;ITE00100554&apos;, 53.42),\n (&apos;EZE00100082&apos;, 48.379999999999995),\n (&apos;ITE00100554&apos;, 50.0),\n (&apos;EZE00100082&apos;, 47.3),\n (&apos;ITE00100554&apos;, 55.22),\n (&apos;EZE00100082&apos;, 51.8),\n (&apos;ITE00100554&apos;, 57.92),\n (&apos;EZE00100082&apos;, 49.64),\n (&apos;ITE00100554&apos;, 57.92),\n (&apos;EZE00100082&apos;, 48.92),\n (&apos;ITE00100554&apos;, 61.34),\n (&apos;EZE00100082&apos;, 51.620000000000005),\n (&apos;ITE00100554&apos;, 57.38),\n (&apos;EZE00100082&apos;, 49.1),\n (&apos;ITE00100554&apos;, 59.0),\n (&apos;EZE00100082&apos;, 45.68),\n (&apos;ITE00100554&apos;, 59.72),\n (&apos;EZE00100082&apos;, 49.64),\n (&apos;ITE00100554&apos;, 61.7),\n (&apos;EZE00100082&apos;, 50.72),\n (&apos;ITE00100554&apos;, 61.88),\n (&apos;EZE00100082&apos;, 53.6),\n (&apos;ITE00100554&apos;, 59.0),\n (&apos;EZE00100082&apos;, 54.5),\n (&apos;ITE00100554&apos;, 59.0),\n (&apos;EZE00100082&apos;, 49.46),\n (&apos;ITE00100554&apos;, 54.14),\n (&apos;EZE00100082&apos;, 49.82),\n (&apos;ITE00100554&apos;, 52.34),\n (&apos;EZE00100082&apos;, 49.64),\n (&apos;ITE00100554&apos;, 50.0),\n (&apos;EZE00100082&apos;, 48.74),\n (&apos;ITE00100554&apos;, 49.28),\n (&apos;EZE00100082&apos;, 49.46),\n (&apos;ITE00100554&apos;, 51.620000000000005),\n (&apos;EZE00100082&apos;, 44.96),\n (&apos;ITE00100554&apos;, 52.88),\n (&apos;EZE00100082&apos;, 40.64),\n (&apos;ITE00100554&apos;, 50.72),\n (&apos;EZE00100082&apos;, 35.96),\n (&apos;ITE00100554&apos;, 45.5),\n (&apos;EZE00100082&apos;, 47.3),\n (&apos;ITE00100554&apos;, 44.42),\n (&apos;EZE00100082&apos;, 45.5),\n (&apos;ITE00100554&apos;, 44.78),\n (&apos;EZE00100082&apos;, 42.8),\n (&apos;ITE00100554&apos;, 51.8),\n (&apos;EZE00100082&apos;, 41.36),\n (&apos;ITE00100554&apos;, 52.34),\n (&apos;EZE00100082&apos;, 39.92),\n (&apos;ITE00100554&apos;, 39.92),\n (&apos;EZE00100082&apos;, 37.94),\n (&apos;ITE00100554&apos;, 37.58),\n (&apos;EZE00100082&apos;, 30.02),\n (&apos;ITE00100554&apos;, 41.0),\n (&apos;EZE00100082&apos;, 41.9),\n (&apos;ITE00100554&apos;, 42.8),\n (&apos;EZE00100082&apos;, 40.1),\n (&apos;ITE00100554&apos;, 54.5),\n (&apos;EZE00100082&apos;, 42.620000000000005),\n (&apos;ITE00100554&apos;, 52.34),\n (&apos;EZE00100082&apos;, 42.8),\n (&apos;ITE00100554&apos;, 52.88),\n (&apos;EZE00100082&apos;, 44.6),\n (&apos;ITE00100554&apos;, 52.88),\n (&apos;EZE00100082&apos;, 35.96),\n (&apos;ITE00100554&apos;, 52.88),\n (&apos;EZE00100082&apos;, 42.26),\n (&apos;ITE00100554&apos;, 52.88),\n (&apos;EZE00100082&apos;, 42.8),\n (&apos;ITE00100554&apos;, 48.2),\n (&apos;EZE00100082&apos;, 46.22),\n (&apos;ITE00100554&apos;, 51.08),\n (&apos;EZE00100082&apos;, 46.22),\n (&apos;ITE00100554&apos;, 50.0),\n (&apos;EZE00100082&apos;, 42.980000000000004),\n (&apos;ITE00100554&apos;, 40.64),\n (&apos;EZE00100082&apos;, 41.18),\n (&apos;ITE00100554&apos;, 41.0),\n (&apos;EZE00100082&apos;, 40.1),\n (&apos;ITE00100554&apos;, 49.64),\n (&apos;EZE00100082&apos;, 45.32),\n (&apos;ITE00100554&apos;, 51.620000000000005),\n (&apos;EZE00100082&apos;, 53.96),\n (&apos;ITE00100554&apos;, 50.72),\n (&apos;EZE00100082&apos;, 43.52),\n (&apos;ITE00100554&apos;, 52.88),\n (&apos;EZE00100082&apos;, 39.74),\n (&apos;ITE00100554&apos;, 53.78),\n (&apos;EZE00100082&apos;, 40.1),\n (&apos;ITE00100554&apos;, 49.64),\n (&apos;EZE00100082&apos;, 41.0),\n (&apos;ITE00100554&apos;, 47.84),\n (&apos;EZE00100082&apos;, 36.86),\n (&apos;ITE00100554&apos;, 43.88),\n (&apos;EZE00100082&apos;, 32.18),\n (&apos;ITE00100554&apos;, 48.92),\n (&apos;EZE00100082&apos;, 37.4),\n (&apos;ITE00100554&apos;, 46.22),\n (&apos;EZE00100082&apos;, 39.92),\n (&apos;ITE00100554&apos;, 41.72),\n (&apos;EZE00100082&apos;, 41.0),\n (&apos;ITE00100554&apos;, 46.58),\n (&apos;EZE00100082&apos;, 41.9),\n (&apos;ITE00100554&apos;, 41.72),\n (&apos;EZE00100082&apos;, 34.7),\n (&apos;ITE00100554&apos;, 40.28),\n (&apos;EZE00100082&apos;, 32.36),\n (&apos;ITE00100554&apos;, 41.72),\n (&apos;EZE00100082&apos;, 32.0),\n (&apos;ITE00100554&apos;, 35.78),\n (&apos;EZE00100082&apos;, 37.4),\n (&apos;ITE00100554&apos;, 35.42),\n (&apos;EZE00100082&apos;, 34.52),\n (&apos;ITE00100554&apos;, 39.2),\n (&apos;EZE00100082&apos;, 31.1),\n (&apos;ITE00100554&apos;, 41.72),\n (&apos;EZE00100082&apos;, 30.919999999999998),\n (&apos;ITE00100554&apos;, 39.38),\n (&apos;EZE00100082&apos;, 38.84),\n (&apos;ITE00100554&apos;, 40.64),\n (&apos;EZE00100082&apos;, 35.06),\n (&apos;ITE00100554&apos;, 42.620000000000005),\n (&apos;EZE00100082&apos;, 35.06),\n (&apos;ITE00100554&apos;, 36.5),\n (&apos;EZE00100082&apos;, 32.0),\n (&apos;ITE00100554&apos;, 33.62),\n (&apos;EZE00100082&apos;, 31.64),\n (&apos;ITE00100554&apos;, 27.86),\n (&apos;EZE00100082&apos;, 31.1),\n (&apos;ITE00100554&apos;, 31.28),\n (&apos;EZE00100082&apos;, 33.98),\n (&apos;ITE00100554&apos;, 32.72),\n (&apos;EZE00100082&apos;, 31.1),\n (&apos;ITE00100554&apos;, 35.42),\n (&apos;EZE00100082&apos;, 32.72),\n (&apos;ITE00100554&apos;, 34.34),\n (&apos;EZE00100082&apos;, 35.42),\n (&apos;ITE00100554&apos;, 32.54),\n (&apos;EZE00100082&apos;, 32.0),\n (&apos;ITE00100554&apos;, 31.28),\n (&apos;EZE00100082&apos;, 31.28),\n (&apos;ITE00100554&apos;, 30.2),\n (&apos;EZE00100082&apos;, 28.939999999999998),\n (&apos;ITE00100554&apos;, 33.8),\n (&apos;EZE00100082&apos;, 30.38),\n (&apos;ITE00100554&apos;, 38.3),\n (&apos;EZE00100082&apos;, 36.14),\n (&apos;ITE00100554&apos;, 37.22),\n (&apos;EZE00100082&apos;, 38.3),\n (&apos;ITE00100554&apos;, 40.28),\n (&apos;EZE00100082&apos;, 38.3),\n (&apos;ITE00100554&apos;, 43.88),\n (&apos;EZE00100082&apos;, 36.86),\n (&apos;ITE00100554&apos;, 45.14),\n (&apos;EZE00100082&apos;, 36.14),\n (&apos;ITE00100554&apos;, 42.8),\n (&apos;EZE00100082&apos;, 31.46),\n (&apos;ITE00100554&apos;, 41.0),\n (&apos;EZE00100082&apos;, 29.48),\n (&apos;ITE00100554&apos;, 40.64),\n (&apos;EZE00100082&apos;, 25.7),\n (&apos;ITE00100554&apos;, 37.22),\n (&apos;EZE00100082&apos;, 21.919999999999998),\n (&apos;ITE00100554&apos;, 33.8),\n (&apos;EZE00100082&apos;, 20.479999999999997),\n (&apos;ITE00100554&apos;, 29.66),\n (&apos;EZE00100082&apos;, 17.06),\n (&apos;ITE00100554&apos;, 29.66),\n (&apos;EZE00100082&apos;, 32.72),\n (&apos;ITE00100554&apos;, 29.12),\n (&apos;EZE00100082&apos;, 37.4),\n (&apos;ITE00100554&apos;, 32.72),\n (&apos;EZE00100082&apos;, 33.08),\n (&apos;ITE00100554&apos;, 34.34),\n (&apos;EZE00100082&apos;, 33.98),\n (&apos;ITE00100554&apos;, 36.5),\n (&apos;EZE00100082&apos;, 33.44),\n (&apos;ITE00100554&apos;, 33.62),\n (&apos;EZE00100082&apos;, 35.6),\n (&apos;ITE00100554&apos;, 36.5),\n (&apos;EZE00100082&apos;, 33.26),\n (&apos;ITE00100554&apos;, 34.88),\n (&apos;EZE00100082&apos;, 31.46),\n (&apos;ITE00100554&apos;, 37.58),\n (&apos;EZE00100082&apos;, 34.52),\n (&apos;ITE00100554&apos;, 36.5),\n (&apos;EZE00100082&apos;, 31.28)]\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 136.0 failed 1 times, most recent failure: Lost task 0.0 in stage 136.0 (TID 533, localhost, executor driver): org.apache.spark.api.python.PythonException: Traceback (most recent call last):","error":"<div class=\"ansiout\"><span class=\"ansired\">---------------------------------------------------------------------------</span>\n<span class=\"ansired\">Py4JJavaError</span>                             Traceback (most recent call last)\n<span class=\"ansigreen\">&lt;command-958031200797638&gt;</span> in <span class=\"ansicyan\">&lt;module&gt;</span><span class=\"ansiblue\">()</span>\n<span class=\"ansigreen\">     11</span> <span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">     12</span> rdd <span class=\"ansiyellow\">=</span> minTemp<span class=\"ansiyellow\">.</span>map<span class=\"ansiyellow\">(</span>func<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">---&gt; 13</span><span class=\"ansiyellow\"> </span>rdd<span class=\"ansiyellow\">.</span>collect<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/rdd.py</span> in <span class=\"ansicyan\">collect</span><span class=\"ansiblue\">(self)</span>\n<span class=\"ansigreen\">    828</span>         <span class=\"ansired\"># Default path used in OSS Spark / for non-credential passthrough clusters:</span><span class=\"ansiyellow\"></span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    829</span>         <span class=\"ansigreen\">with</span> SCCallSiteSync<span class=\"ansiyellow\">(</span>self<span class=\"ansiyellow\">.</span>context<span class=\"ansiyellow\">)</span> <span class=\"ansigreen\">as</span> css<span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">--&gt; 830</span><span class=\"ansiyellow\">             </span>sock_info <span class=\"ansiyellow\">=</span> self<span class=\"ansiyellow\">.</span>ctx<span class=\"ansiyellow\">.</span>_jvm<span class=\"ansiyellow\">.</span>PythonRDD<span class=\"ansiyellow\">.</span>collectAndServe<span class=\"ansiyellow\">(</span>self<span class=\"ansiyellow\">.</span>_jrdd<span class=\"ansiyellow\">.</span>rdd<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    831</span>         <span class=\"ansigreen\">return</span> list<span class=\"ansiyellow\">(</span>_load_from_socket<span class=\"ansiyellow\">(</span>sock_info<span class=\"ansiyellow\">,</span> self<span class=\"ansiyellow\">.</span>_jrdd_deserializer<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    832</span> <span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py</span> in <span class=\"ansicyan\">__call__</span><span class=\"ansiblue\">(self, *args)</span>\n<span class=\"ansigreen\">   1255</span>         answer <span class=\"ansiyellow\">=</span> self<span class=\"ansiyellow\">.</span>gateway_client<span class=\"ansiyellow\">.</span>send_command<span class=\"ansiyellow\">(</span>command<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">   1256</span>         return_value = get_return_value(\n<span class=\"ansigreen\">-&gt; 1257</span><span class=\"ansiyellow\">             answer, self.gateway_client, self.target_id, self.name)\n</span><span class=\"ansigreen\">   1258</span> <span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">   1259</span>         <span class=\"ansigreen\">for</span> temp_arg <span class=\"ansigreen\">in</span> temp_args<span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/sql/utils.py</span> in <span class=\"ansicyan\">deco</span><span class=\"ansiblue\">(*a, **kw)</span>\n<span class=\"ansigreen\">     61</span>     <span class=\"ansigreen\">def</span> deco<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">*</span>a<span class=\"ansiyellow\">,</span> <span class=\"ansiyellow\">**</span>kw<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">     62</span>         <span class=\"ansigreen\">try</span><span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">---&gt; 63</span><span class=\"ansiyellow\">             </span><span class=\"ansigreen\">return</span> f<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">*</span>a<span class=\"ansiyellow\">,</span> <span class=\"ansiyellow\">**</span>kw<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">     64</span>         <span class=\"ansigreen\">except</span> py4j<span class=\"ansiyellow\">.</span>protocol<span class=\"ansiyellow\">.</span>Py4JJavaError <span class=\"ansigreen\">as</span> e<span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">     65</span>             s <span class=\"ansiyellow\">=</span> e<span class=\"ansiyellow\">.</span>java_exception<span class=\"ansiyellow\">.</span>toString<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/lib/py4j-0.10.7-src.zip/py4j/protocol.py</span> in <span class=\"ansicyan\">get_return_value</span><span class=\"ansiblue\">(answer, gateway_client, target_id, name)</span>\n<span class=\"ansigreen\">    326</span>                 raise Py4JJavaError(\n<span class=\"ansigreen\">    327</span>                     <span class=\"ansiblue\">&quot;An error occurred while calling {0}{1}{2}.\\n&quot;</span><span class=\"ansiyellow\">.</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">--&gt; 328</span><span class=\"ansiyellow\">                     format(target_id, &quot;.&quot;, name), value)\n</span><span class=\"ansigreen\">    329</span>             <span class=\"ansigreen\">else</span><span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    330</span>                 raise Py4JError(\n\n<span class=\"ansired\">Py4JJavaError</span>: An error occurred while calling z:org.apache.spark.api.python.PythonRDD.collectAndServe.\n: org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 136.0 failed 1 times, most recent failure: Lost task 0.0 in stage 136.0 (TID 533, localhost, executor driver): org.apache.spark.api.python.PythonException: Traceback (most recent call last):\n  File &quot;/databricks/spark/python/pyspark/worker.py&quot;, line 403, in main\n    process()\n  File &quot;/databricks/spark/python/pyspark/worker.py&quot;, line 398, in process\n    serializer.dump_stream(func(split_index, iterator), outfile)\n  File &quot;/databricks/spark/python/pyspark/serializers.py&quot;, line 413, in dump_stream\n    vs = list(itertools.islice(iterator, batch))\n  File &quot;/databricks/spark/python/pyspark/util.py&quot;, line 99, in wrapper\n    return f(*args, **kwargs)\n  File &quot;&lt;command-958031200797641&gt;&quot;, line 7, in func\nTypeError: can&apos;t multiply sequence by non-int of type &apos;float&apos;\n\n\tat org.apache.spark.api.python.BasePythonRunner$ReaderIterator.handlePythonException(PythonRunner.scala:490)\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRunner.scala:626)\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRunner.scala:609)\n\tat org.apache.spark.api.python.BasePythonRunner$ReaderIterator.hasNext(PythonRunner.scala:444)\n\tat org.apache.spark.InterruptibleIterator.hasNext(InterruptibleIterator.scala:37)\n\tat scala.collection.Iterator$class.foreach(Iterator.scala:891)\n\tat org.apache.spark.InterruptibleIterator.foreach(InterruptibleIterator.scala:28)\n\tat scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:59)\n\tat scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:104)\n\tat scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:48)\n\tat scala.collection.TraversableOnce$class.to(TraversableOnce.scala:310)\n\tat org.apache.spark.InterruptibleIterator.to(InterruptibleIterator.scala:28)\n\tat scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:302)\n\tat org.apache.spark.InterruptibleIterator.toBuffer(InterruptibleIterator.scala:28)\n\tat scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:289)\n\tat org.apache.spark.InterruptibleIterator.toArray(InterruptibleIterator.scala:28)\n\tat org.apache.spark.rdd.RDD$$anonfun$collect$1$$anonfun$13.apply(RDD.scala:961)\n\tat org.apache.spark.rdd.RDD$$anonfun$collect$1$$anonfun$13.apply(RDD.scala:961)\n\tat org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:2281)\n\tat org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:2281)\n\tat org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:90)\n\tat org.apache.spark.scheduler.Task.doRunTask(Task.scala:139)\n\tat org.apache.spark.scheduler.Task.run(Task.scala:112)\n\tat org.apache.spark.executor.Executor$TaskRunner$$anonfun$13.apply(Executor.scala:497)\n\tat org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1481)\n\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:503)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\nDriver stacktrace:\n\tat org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:2355)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:2343)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:2342)\n\tat scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)\n\tat scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48)\n\tat org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:2342)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:1096)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:1096)\n\tat scala.Option.foreach(Option.scala:257)\n\tat org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:1096)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:2574)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:2522)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:2510)\n\tat org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:49)\n\tat org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:893)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2240)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2262)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2281)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2306)\n\tat org.apache.spark.rdd.RDD$$anonfun$collect$1.apply(RDD.scala:961)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)\n\tat org.apache.spark.rdd.RDD.withScope(RDD.scala:379)\n\tat org.apache.spark.rdd.RDD.collect(RDD.scala:960)\n\tat org.apache.spark.api.python.PythonRDD$.collectAndServe(PythonRDD.scala:209)\n\tat org.apache.spark.api.python.PythonRDD.collectAndServe(PythonRDD.scala)\n\tat sun.reflect.GeneratedMethodAccessor555.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:380)\n\tat py4j.Gateway.invoke(Gateway.java:295)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:251)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: org.apache.spark.api.python.PythonException: Traceback (most recent call last):\n  File &quot;/databricks/spark/python/pyspark/worker.py&quot;, line 403, in main\n    process()\n  File &quot;/databricks/spark/python/pyspark/worker.py&quot;, line 398, in process\n    serializer.dump_stream(func(split_index, iterator), outfile)\n  File &quot;/databricks/spark/python/pyspark/serializers.py&quot;, line 413, in dump_stream\n    vs = list(itertools.islice(iterator, batch))\n  File &quot;/databricks/spark/python/pyspark/util.py&quot;, line 99, in wrapper\n    return f(*args, **kwargs)\n  File &quot;&lt;command-958031200797641&gt;&quot;, line 7, in func\nTypeError: can&apos;t multiply sequence by non-int of type &apos;float&apos;\n\n\tat org.apache.spark.api.python.BasePythonRunner$ReaderIterator.handlePythonException(PythonRunner.scala:490)\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRunner.scala:626)\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRunner.scala:609)\n\tat org.apache.spark.api.python.BasePythonRunner$ReaderIterator.hasNext(PythonRunner.scala:444)\n\tat org.apache.spark.InterruptibleIterator.hasNext(InterruptibleIterator.scala:37)\n\tat scala.collection.Iterator$class.foreach(Iterator.scala:891)\n\tat org.apache.spark.InterruptibleIterator.foreach(InterruptibleIterator.scala:28)\n\tat scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:59)\n\tat scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:104)\n\tat scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:48)\n\tat scala.collection.TraversableOnce$class.to(TraversableOnce.scala:310)\n\tat org.apache.spark.InterruptibleIterator.to(InterruptibleIterator.scala:28)\n\tat scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:302)\n\tat org.apache.spark.InterruptibleIterator.toBuffer(InterruptibleIterator.scala:28)\n\tat scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:289)\n\tat org.apache.spark.InterruptibleIterator.toArray(InterruptibleIterator.scala:28)\n\tat org.apache.spark.rdd.RDD$$anonfun$collect$1$$anonfun$13.apply(RDD.scala:961)\n\tat org.apache.spark.rdd.RDD$$anonfun$collect$1$$anonfun$13.apply(RDD.scala:961)\n\tat org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:2281)\n\tat org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:2281)\n\tat org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:90)\n\tat org.apache.spark.scheduler.Task.doRunTask(Task.scala:139)\n\tat org.apache.spark.scheduler.Task.run(Task.scala:112)\n\tat org.apache.spark.executor.Executor$TaskRunner$$anonfun$13.apply(Executor.scala:497)\n\tat org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1481)\n\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:503)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\t... 1 more\n</div>","workflows":[],"startTime":1563624728899,"submitTime":1563624728892,"finishTime":1563624729339,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"tushargoyal19tj@gmail.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"988c6f98-3305-40e0-a8e7-b9be83e68657"},{"version":"CommandV1","origId":958031200797640,"guid":"484d1258-4984-488f-8d99-06426e1b382c","subtype":"command","commandType":"auto","position":2.0,"command":"# getting all the minimum value of temp for the key value pair down below\n# calculating the minimum value among the same (key,value) pair data\nmintemp = stationtemp.reduceByKey(lambda x,y : min(x,y))\nmintemp.collect()[0]","commandVersion":101,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"><span class=\"ansired\">Out[</span><span class=\"ansired\">31</span><span class=\"ansired\">]: </span>(&apos;ITE00100554&apos;, 5.359999999999999)\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 146.0 failed 1 times, most recent failure: Lost task 0.0 in stage 146.0 (TID 553, localhost, executor driver): org.apache.spark.api.python.PythonException: Traceback (most recent call last):","error":"<div class=\"ansiout\"><span class=\"ansired\">---------------------------------------------------------------------------</span>\n<span class=\"ansired\">Py4JJavaError</span>                             Traceback (most recent call last)\n<span class=\"ansigreen\">&lt;command-958031200797640&gt;</span> in <span class=\"ansicyan\">&lt;module&gt;</span><span class=\"ansiblue\">()</span>\n<span class=\"ansigreen\">      1</span> mintemp <span class=\"ansiyellow\">=</span> stationtemp<span class=\"ansiyellow\">.</span>mapValues<span class=\"ansiyellow\">(</span><span class=\"ansigreen\">lambda</span> x<span class=\"ansiyellow\">:</span> x<span class=\"ansiyellow\">.</span>min<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">----&gt; 2</span><span class=\"ansiyellow\"> </span>mintemp<span class=\"ansiyellow\">.</span>collect<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/rdd.py</span> in <span class=\"ansicyan\">collect</span><span class=\"ansiblue\">(self)</span>\n<span class=\"ansigreen\">    828</span>         <span class=\"ansired\"># Default path used in OSS Spark / for non-credential passthrough clusters:</span><span class=\"ansiyellow\"></span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    829</span>         <span class=\"ansigreen\">with</span> SCCallSiteSync<span class=\"ansiyellow\">(</span>self<span class=\"ansiyellow\">.</span>context<span class=\"ansiyellow\">)</span> <span class=\"ansigreen\">as</span> css<span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">--&gt; 830</span><span class=\"ansiyellow\">             </span>sock_info <span class=\"ansiyellow\">=</span> self<span class=\"ansiyellow\">.</span>ctx<span class=\"ansiyellow\">.</span>_jvm<span class=\"ansiyellow\">.</span>PythonRDD<span class=\"ansiyellow\">.</span>collectAndServe<span class=\"ansiyellow\">(</span>self<span class=\"ansiyellow\">.</span>_jrdd<span class=\"ansiyellow\">.</span>rdd<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    831</span>         <span class=\"ansigreen\">return</span> list<span class=\"ansiyellow\">(</span>_load_from_socket<span class=\"ansiyellow\">(</span>sock_info<span class=\"ansiyellow\">,</span> self<span class=\"ansiyellow\">.</span>_jrdd_deserializer<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    832</span> <span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py</span> in <span class=\"ansicyan\">__call__</span><span class=\"ansiblue\">(self, *args)</span>\n<span class=\"ansigreen\">   1255</span>         answer <span class=\"ansiyellow\">=</span> self<span class=\"ansiyellow\">.</span>gateway_client<span class=\"ansiyellow\">.</span>send_command<span class=\"ansiyellow\">(</span>command<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">   1256</span>         return_value = get_return_value(\n<span class=\"ansigreen\">-&gt; 1257</span><span class=\"ansiyellow\">             answer, self.gateway_client, self.target_id, self.name)\n</span><span class=\"ansigreen\">   1258</span> <span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">   1259</span>         <span class=\"ansigreen\">for</span> temp_arg <span class=\"ansigreen\">in</span> temp_args<span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/sql/utils.py</span> in <span class=\"ansicyan\">deco</span><span class=\"ansiblue\">(*a, **kw)</span>\n<span class=\"ansigreen\">     61</span>     <span class=\"ansigreen\">def</span> deco<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">*</span>a<span class=\"ansiyellow\">,</span> <span class=\"ansiyellow\">**</span>kw<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">     62</span>         <span class=\"ansigreen\">try</span><span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">---&gt; 63</span><span class=\"ansiyellow\">             </span><span class=\"ansigreen\">return</span> f<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">*</span>a<span class=\"ansiyellow\">,</span> <span class=\"ansiyellow\">**</span>kw<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">     64</span>         <span class=\"ansigreen\">except</span> py4j<span class=\"ansiyellow\">.</span>protocol<span class=\"ansiyellow\">.</span>Py4JJavaError <span class=\"ansigreen\">as</span> e<span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">     65</span>             s <span class=\"ansiyellow\">=</span> e<span class=\"ansiyellow\">.</span>java_exception<span class=\"ansiyellow\">.</span>toString<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/lib/py4j-0.10.7-src.zip/py4j/protocol.py</span> in <span class=\"ansicyan\">get_return_value</span><span class=\"ansiblue\">(answer, gateway_client, target_id, name)</span>\n<span class=\"ansigreen\">    326</span>                 raise Py4JJavaError(\n<span class=\"ansigreen\">    327</span>                     <span class=\"ansiblue\">&quot;An error occurred while calling {0}{1}{2}.\\n&quot;</span><span class=\"ansiyellow\">.</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">--&gt; 328</span><span class=\"ansiyellow\">                     format(target_id, &quot;.&quot;, name), value)\n</span><span class=\"ansigreen\">    329</span>             <span class=\"ansigreen\">else</span><span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    330</span>                 raise Py4JError(\n\n<span class=\"ansired\">Py4JJavaError</span>: An error occurred while calling z:org.apache.spark.api.python.PythonRDD.collectAndServe.\n: org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 146.0 failed 1 times, most recent failure: Lost task 0.0 in stage 146.0 (TID 553, localhost, executor driver): org.apache.spark.api.python.PythonException: Traceback (most recent call last):\n  File &quot;/databricks/spark/python/pyspark/worker.py&quot;, line 403, in main\n    process()\n  File &quot;/databricks/spark/python/pyspark/worker.py&quot;, line 398, in process\n    serializer.dump_stream(func(split_index, iterator), outfile)\n  File &quot;/databricks/spark/python/pyspark/serializers.py&quot;, line 413, in dump_stream\n    vs = list(itertools.islice(iterator, batch))\n  File &quot;/databricks/spark/python/pyspark/util.py&quot;, line 99, in wrapper\n    return f(*args, **kwargs)\n  File &quot;/databricks/spark/python/pyspark/rdd.py&quot;, line 2000, in &lt;lambda&gt;\n    map_values_fn = lambda kv: (kv[0], f(kv[1]))\n  File &quot;&lt;command-958031200797640&gt;&quot;, line 1, in &lt;lambda&gt;\nAttributeError: &apos;float&apos; object has no attribute &apos;min&apos;\n\n\tat org.apache.spark.api.python.BasePythonRunner$ReaderIterator.handlePythonException(PythonRunner.scala:490)\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRunner.scala:626)\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRunner.scala:609)\n\tat org.apache.spark.api.python.BasePythonRunner$ReaderIterator.hasNext(PythonRunner.scala:444)\n\tat org.apache.spark.InterruptibleIterator.hasNext(InterruptibleIterator.scala:37)\n\tat scala.collection.Iterator$class.foreach(Iterator.scala:891)\n\tat org.apache.spark.InterruptibleIterator.foreach(InterruptibleIterator.scala:28)\n\tat scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:59)\n\tat scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:104)\n\tat scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:48)\n\tat scala.collection.TraversableOnce$class.to(TraversableOnce.scala:310)\n\tat org.apache.spark.InterruptibleIterator.to(InterruptibleIterator.scala:28)\n\tat scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:302)\n\tat org.apache.spark.InterruptibleIterator.toBuffer(InterruptibleIterator.scala:28)\n\tat scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:289)\n\tat org.apache.spark.InterruptibleIterator.toArray(InterruptibleIterator.scala:28)\n\tat org.apache.spark.rdd.RDD$$anonfun$collect$1$$anonfun$13.apply(RDD.scala:961)\n\tat org.apache.spark.rdd.RDD$$anonfun$collect$1$$anonfun$13.apply(RDD.scala:961)\n\tat org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:2281)\n\tat org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:2281)\n\tat org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:90)\n\tat org.apache.spark.scheduler.Task.doRunTask(Task.scala:139)\n\tat org.apache.spark.scheduler.Task.run(Task.scala:112)\n\tat org.apache.spark.executor.Executor$TaskRunner$$anonfun$13.apply(Executor.scala:497)\n\tat org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1481)\n\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:503)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\nDriver stacktrace:\n\tat org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:2355)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:2343)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:2342)\n\tat scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)\n\tat scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48)\n\tat org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:2342)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:1096)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:1096)\n\tat scala.Option.foreach(Option.scala:257)\n\tat org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:1096)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:2574)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:2522)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:2510)\n\tat org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:49)\n\tat org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:893)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2240)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2262)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2281)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2306)\n\tat org.apache.spark.rdd.RDD$$anonfun$collect$1.apply(RDD.scala:961)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)\n\tat org.apache.spark.rdd.RDD.withScope(RDD.scala:379)\n\tat org.apache.spark.rdd.RDD.collect(RDD.scala:960)\n\tat org.apache.spark.api.python.PythonRDD$.collectAndServe(PythonRDD.scala:209)\n\tat org.apache.spark.api.python.PythonRDD.collectAndServe(PythonRDD.scala)\n\tat sun.reflect.GeneratedMethodAccessor555.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:380)\n\tat py4j.Gateway.invoke(Gateway.java:295)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:251)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: org.apache.spark.api.python.PythonException: Traceback (most recent call last):\n  File &quot;/databricks/spark/python/pyspark/worker.py&quot;, line 403, in main\n    process()\n  File &quot;/databricks/spark/python/pyspark/worker.py&quot;, line 398, in process\n    serializer.dump_stream(func(split_index, iterator), outfile)\n  File &quot;/databricks/spark/python/pyspark/serializers.py&quot;, line 413, in dump_stream\n    vs = list(itertools.islice(iterator, batch))\n  File &quot;/databricks/spark/python/pyspark/util.py&quot;, line 99, in wrapper\n    return f(*args, **kwargs)\n  File &quot;/databricks/spark/python/pyspark/rdd.py&quot;, line 2000, in &lt;lambda&gt;\n    map_values_fn = lambda kv: (kv[0], f(kv[1]))\n  File &quot;&lt;command-958031200797640&gt;&quot;, line 1, in &lt;lambda&gt;\nAttributeError: &apos;float&apos; object has no attribute &apos;min&apos;\n\n\tat org.apache.spark.api.python.BasePythonRunner$ReaderIterator.handlePythonException(PythonRunner.scala:490)\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRunner.scala:626)\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRunner.scala:609)\n\tat org.apache.spark.api.python.BasePythonRunner$ReaderIterator.hasNext(PythonRunner.scala:444)\n\tat org.apache.spark.InterruptibleIterator.hasNext(InterruptibleIterator.scala:37)\n\tat scala.collection.Iterator$class.foreach(Iterator.scala:891)\n\tat org.apache.spark.InterruptibleIterator.foreach(InterruptibleIterator.scala:28)\n\tat scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:59)\n\tat scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:104)\n\tat scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:48)\n\tat scala.collection.TraversableOnce$class.to(TraversableOnce.scala:310)\n\tat org.apache.spark.InterruptibleIterator.to(InterruptibleIterator.scala:28)\n\tat scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:302)\n\tat org.apache.spark.InterruptibleIterator.toBuffer(InterruptibleIterator.scala:28)\n\tat scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:289)\n\tat org.apache.spark.InterruptibleIterator.toArray(InterruptibleIterator.scala:28)\n\tat org.apache.spark.rdd.RDD$$anonfun$collect$1$$anonfun$13.apply(RDD.scala:961)\n\tat org.apache.spark.rdd.RDD$$anonfun$collect$1$$anonfun$13.apply(RDD.scala:961)\n\tat org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:2281)\n\tat org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:2281)\n\tat org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:90)\n\tat org.apache.spark.scheduler.Task.doRunTask(Task.scala:139)\n\tat org.apache.spark.scheduler.Task.run(Task.scala:112)\n\tat org.apache.spark.executor.Executor$TaskRunner$$anonfun$13.apply(Executor.scala:497)\n\tat org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1481)\n\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:503)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\t... 1 more\n</div>","workflows":[],"startTime":1563624946903,"submitTime":1563624946897,"finishTime":1563624947203,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"tushargoyal19tj@gmail.com","latestUserId":null,"commandTitle":"Here we are taking min temperature from the same (key,value) pair.","showCommandTitle":true,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"9411bd54-3b0e-47a3-8ea0-3c4dee161980"},{"version":"CommandV1","origId":958031200797641,"guid":"32305174-762e-4deb-afae-28d7074573b0","subtype":"command","commandType":"auto","position":0.5,"command":"\n\n# filter out the entries that don't have TMIN in the first term\n# find out the minimum temperature in a year\ndef func(lines):\n  line = lines.split(',')\n  station = line[0]\n  time = line[1]\n  #converting temp in F\n  temp =  float(line[3]) * 0.1 *(9.0/5.0) + 32.0\n  return(station, time, temp)\n  ","commandVersion":153,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1563624299121,"submitTime":1563624299116,"finishTime":1563624299141,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"tushargoyal19tj@gmail.com","latestUserId":null,"commandTitle":"Defining function to get all the data","showCommandTitle":true,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"fdc67c52-91b5-4149-88e9-2f2ffc39e063"},{"version":"CommandV1","origId":958031200797642,"guid":"df463f8a-a0c2-427f-8798-dae4e78dcad0","subtype":"command","commandType":"auto","position":3.0,"command":"","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"c382fdcc-56bd-4f7d-bf49-bb20944a5308"}],"dashboards":[],"guid":"8d27acb5-fe1d-45d0-89da-1c767535c116","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}